name: Plan and Apply Called Workflow

on:
  workflow_call:
    inputs:
      arm_subscription_id:
        required: true
        type: string
      arm_tenant_id:
        default: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
        required: false
        type: string
      checkout_ref:
        required: true
        type: string
      github_env:
        required: true
        type: string
      terraform_version:
        required: true
        type: string
      tf_plan_args:
        required: true
        type: string
      tf_state_container:
        default: tfstate
        required: false
        type: string
      tf_state_key:
        default: terraform.tfstate.
        required: false
        type: string
      tf_state_storage_account:
        required: true
        type: string
      tf_workspace:
        required: true
        type: string
      working_dir:
        required: true
        type: string

    secrets:
      arm_client_id:
        required: true
      arm_client_secret:
        required: true
      gpg_passphrase:
        required: true
      ssh_key:
        required: true
      tf_plan_secret_args:
        required: false
      tf_state_access_key:
        required: true

env:
  GIT_SSH_COMMAND: ssh -i ./id_rsa -o UserKnownHostsFile=./known_hosts
  ARM_CLIENT_ID: ${{ secrets.arm_client_id }}
  ARM_CLIENT_SECRET: ${{ secrets.arm_client_secret }}
  ARM_SUBSCRIPTION_ID: ${{ inputs.arm_subscription_id }}
  ARM_TENANT_ID: ${{ inputs.arm_tenant_id }}

jobs:
  plan:
    name: "Terraform: plan"
    runs-on: ubuntu-latest

    # Use the Bash shell
    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.working_dir }}

    steps:
      # GitHub - Checkout
      # https://github.com/marketplace/actions/checkout

      - name: GitHub Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.checkout_ref }}

      # GitHub - Setup SSH for Module Access

      - name: Setup SSH for Module Access
        run: |
          echo "${{ secrets.ssh_key }}" > id_rsa
          ssh-keyscan github.com > known_hosts
          chmod 400 id_rsa known_hosts

      # HashiCorp - Setup Terraform
      # https://github.com/marketplace/actions/hashicorp-setup-terraform

      - name: Setup Terraform Action
        uses: hashicorp/setup-terraform@v1.4.0
        with:
          terraform_version: ${{ inputs.terraform_version }}

      - name: Terraform Initialize - https://www.terraform.io/docs/commands/init.html
        run: terraform init
          -backend-config="access_key=${{ secrets.tf_state_access_key }}"
          -backend-config="container_name=${{ inputs.tf_state_container }}"
          -backend-config="key=${{ inputs.tf_state_key }}"
          -backend-config="storage_account_name=${{ inputs.tf_state_storage_account }}"

      - name: Terraform Workspace - https://www.terraform.io/docs/commands/workspace/index.html
        run: >-
          terraform workspace select ${{ inputs.tf_workspace }} ||
          terraform workspace new ${{ inputs.tf_workspace }}

      - name: Terraform Format - https://www.terraform.io/docs/commands/fmt.html
        run: terraform fmt -check

      - name: Terraform Validate - https://www.terraform.io/docs/commands/validate.html
        run: terraform validate

      - name: Terraform Plan - https://www.terraform.io/docs/commands/plan.html
        id: plan
        run: terraform plan -detailed-exitcode -input=false -out=plan.out ${{ inputs.tf_plan_args}} ${{ secrets.tf_plan_secret_args }}
        continue-on-error: true

      - name: Check for Plan Failure
        if: steps.plan.outputs.exitcode == 1
        run: exit 1

      # Encrypt - Terraform plan.out

      - name: Encrypt Terraform "plan.out"
        if: steps.plan.outputs.exitcode == 2
        run: gpg --quiet --batch --yes --passphrase ${{ secrets.gpg_passphrase }} --symmetric --cipher-algo AES256 plan.out

      # Github - Upload Artifact
      # https://github.com/marketplace/actions/upload-a-build-artifact

      - name: Upload Encrypted Artifact
        if: steps.plan.outputs.exitcode == 2
        uses: actions/upload-artifact@v2
        with:
          name: ${{ inputs.tf_workspace }}-encrypted-plan
          path: ${{ inputs.working_dir }}/plan.out.gpg

    outputs:
      planExitcode: ${{ steps.plan.outputs.exitcode }}

  apply:
    name: "Terraform: apply"
    needs: plan
    if: needs.plan.outputs.planExitcode == 2
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.github_env }}

    # Use the Bash shell
    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.working_dir }}

    steps:
      # GitHub - Checkout
      # https://github.com/marketplace/actions/checkout

      - name: GitHub Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.checkout_ref }}

      # GitHub - Setup SSH for Module Access

      - name: Setup SSH for Module Access
        run: |
          echo "${{ secrets.ssh_key }}" > id_rsa
          ssh-keyscan github.com > known_hosts
          chmod 400 id_rsa known_hosts

      # Github - Download Artifact
      # https://github.com/marketplace/actions/download-a-build-artifact

      - name: Download Artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ inputs.tf_workspace }}-encrypted-plan
          path: ${{ inputs.working_dir }}

      # Decrypt - Terraform plan.out

      - name: Decrypt Terraform "plan.out"
        run: gpg --quiet --batch --yes --passphrase ${{ secrets.gpg_passphrase }} --output plan.out plan.out.gpg

      # HashiCorp - Setup Terraform
      # https://github.com/marketplace/actions/hashicorp-setup-terraform

      - name: Setup Terraform Action
        uses: hashicorp/setup-terraform@v1.4.0
        with:
          terraform_version: ${{ inputs.terraform_version }}

      - name: Terraform Initialize - https://www.terraform.io/docs/commands/init.html
        run: terraform init
          -backend-config="access_key=${{ secrets.tf_state_access_key }}"
          -backend-config="container_name=${{ inputs.tf_state_container }}"
          -backend-config="key=${{ inputs.tf_state_key }}"
          -backend-config="storage_account_name=${{ inputs.tf_state_storage_account }}"

      - name: Terraform Workspace - https://www.terraform.io/docs/commands/workspace/index.html
        run: terraform workspace select ${{ inputs.tf_workspace }}

      - name: Terraform Apply - https://www.terraform.io/docs/commands/apply.html
        run: terraform apply plan.out
